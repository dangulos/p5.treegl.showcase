<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>P5.treegl Showcase</title><link>http://dangulos.github.io/p5.treegl.showcase/docs/Componentes/</link><description>Recent content on P5.treegl Showcase</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://dangulos.github.io/p5.treegl.showcase/docs/Componentes/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://dangulos.github.io/p5.treegl.showcase/docs/Componentes/Arrow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://dangulos.github.io/p5.treegl.showcase/docs/Componentes/Arrow/</guid><description>Arrow # Es una simple flecha hecha utilizando pipe&amp;rsquo;s. Resulta útil para señalar puntos dada la necesidad.
Parámetros # detail number : El detalle de la flecha. Entre mayor sea, más suave se ve. radius number : Radio de la flecha. height number : Altura de la flecha. Showcase # code # sketch.js // gui params var detail = 16; var radius = 20; var height = 20; var gui; function setup() { createCanvas(450, 450, WEBGL); setAttributes(&amp;#39;antialias&amp;#39;, true); easycam = createEasyCam(); gui = createGui(&amp;#39;Axes&amp;#39;); gui.</description></item><item><title/><link>http://dangulos.github.io/p5.treegl.showcase/docs/Componentes/Axes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://dangulos.github.io/p5.treegl.showcase/docs/Componentes/Axes/</guid><description>Axes # Los Axes (o ejes en español) dibujan tres líneas ortogonales en 3D que pueden ser útiles como punto de referencia al momento de rotar algún objeto
Parámetros # size number : Tamaño de los ejes, todos los ejes comparten la misma distancia. bits number : Bitmask que permite indicar qué ejes dibujar. Uso de la Bitmask # El parámetro bits permite elegir qué ejes se dibujan y a pesar de que el parámetro que se ingresa es un número, funciona como una Bitmask (Similar a los permisos numéricos del comando chmod en GNU/Linux).</description></item><item><title/><link>http://dangulos.github.io/p5.treegl.showcase/docs/Componentes/Bagel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://dangulos.github.io/p5.treegl.showcase/docs/Componentes/Bagel/</guid><description>Bagel # El bagel o &amp;ldquo;figure 8&amp;rdquo; es una immersión de la botella de Klein. Esta figura se puede hacer uniendo dos cintas de Möbius.
Parámetros # mayorDetail number : Detalle del recorrido del radio mayor del bagel minorDetail number : Detalle del recorrido del radio menor del bagel. mayorRadius number : Radio desde el centro del bagle hasta el centro de su &amp;ldquo;cuerpo&amp;rdquo;. minorDetail number : Radio desde el centro del &amp;ldquo;cuerpo&amp;rdquo; hasta la superficie externa de este.</description></item><item><title/><link>http://dangulos.github.io/p5.treegl.showcase/docs/Componentes/Bullseye/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://dangulos.github.io/p5.treegl.showcase/docs/Componentes/Bullseye/</guid><description>Bullseye # Los bullseye son figuras en 2D que facilitan indentificar la posición de un objeto en 3D.
Parámetros # x number : Posición en x. y number : Posición en y. size number : Diámetro del bullseye. shape number : El bullseye puede mostrarse en forma circular (con Tree.CIRCLE) o cuadrada (con Tree.SQUARE). Defacto es circular. Showcase # code # sketch.js // gui params var x = 200; var y = 200; var size = 150; var shape = [&amp;#39;Tree.</description></item><item><title/><link>http://dangulos.github.io/p5.treegl.showcase/docs/Componentes/Grid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://dangulos.github.io/p5.treegl.showcase/docs/Componentes/Grid/</guid><description>Grid # Una grid es una cuadrícula que facilita visualizar el tamaño, movimiento o rotación de un objeto al colocarla desde un punto relativo.
Parámetros # subdivisions number : Cantidad de subdivisiones. size number : Tamaño de la cuadrilla. shape number : La cuadrilla puede mostrarse en forma punteada (con Tree.DOTS) o sólida (con Tree.SOLID). Defacto es punteada. Showcase # code # sketch.js // gui params var subdivisions = 10; var size = 200; var style = [&amp;#39;Tree.</description></item><item><title/><link>http://dangulos.github.io/p5.treegl.showcase/docs/Componentes/Mobius_Strip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://dangulos.github.io/p5.treegl.showcase/docs/Componentes/Mobius_Strip/</guid><description>Möbius Strip # Una cinta de Möbius es una cinta continua que tiene una sola superficie.
Parámetros # detail number : El detalle de la cinta. Entre mayor sea, más suave se ve. radius number : Radio de la cinta. Showcase # code # sketch.js // gui params var detail = 16; var radius = 20; var gui; function setup() { createCanvas(450, 450, WEBGL); setAttributes(&amp;#39;antialias&amp;#39;, true); easycam = createEasyCam(); gui = createGui(&amp;#39;Axes&amp;#39;); gui.</description></item><item><title/><link>http://dangulos.github.io/p5.treegl.showcase/docs/Componentes/Pipe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://dangulos.github.io/p5.treegl.showcase/docs/Componentes/Pipe/</guid><description>Pipe # Un pipe es un cilindro cuyas bases se pueden rotar dado un vector específico. Esta figura es útil porque cuando se concatenan varias se pueden hacer figuras más completas.
Parámetros # detail number : El detalle del cilindro. Entre mayor sea, más suave se ve. topRadius number : Radio de la base superior del cilindro. bottomRadius number : Radio de la base inferior del cilindro. height number : La altura del cilindro.</description></item><item><title/><link>http://dangulos.github.io/p5.treegl.showcase/docs/Componentes/viewFrustum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://dangulos.github.io/p5.treegl.showcase/docs/Componentes/viewFrustum/</guid><description>ViewFrustum # Treegl permite visualizar el volumen que está renderizando una cámara por medio de un frustum. Éste frustum mustra la posición de la pantalla, la distancia de renderizado y la forma que esta toma.
Parámetros # fbo p5.RendererGL | p5.Graphics : Es el renderer que va a mostrar el frustum. bits number : Bitmask para controlar diversos parámetros como qué plános se dibujan. viewer function : Callback para mostrar la representación visual del fbo.</description></item></channel></rss>